#!/usr/bin/env ruby

require 'highline/import'
require 'fileutils'

action = ARGV[0].nil? ? nil : ARGV[0].downcase

def home
  File.expand_path('~')
end

case action
# ======================================
# Install Development App
# ======================================
when 'install'
  # verify existance of production database (by asking)
  choose do |menu|
    menu.prompt = "Do you have a production database installed and running? "
    menu.choice("Fuck yeah!") do
      say("\nAwesome! Let's get some info about that database...")
    end
    menu.choices("No, I have trouble reading directions.") do
      msg  = "\n<%= color('Oh no!', [:bold, :red]) %> "
      msg += "You need to get your production app up and running first."
      msg += "\nThis is just a way to access production data."
      say(msg)
      exit
    end
  end
  # gather database info
  db_host = ask("Host (production IP address): ")
  db_port = ask("PostgreSQL Port (usually it's 5432): ")
  db_name = ask("Database Name: ")
  db_username = ask("PostgreSQL User: ")
  db_password = ask("User's Password (will show as Xs): ") { |q| q.echo = "x" }
  # clone the repo
  say("Good stuff, bro! Now, I shall install the developer app...\n")
  repo_url = 'https://github.com/seancdavis/sapwood-developer.git'
  system "git clone #{repo_url} ~/.sapwood"
  # write the database config
  say("Adding database config...")
  db_config = "development:\n  adapter: postgresql\n  encoding: unicode"
  db_config += "\n  pool: 5\n  host: #{db_host}\n  username: #{db_username}"
  db_config += "\n  password: #{db_password}\n  port: #{db_port}"
  db_config += "\n  database: #{db_name}\n"
  db_file = "#{home}/.sapwood/config/database.yml"
  File.open(db_file, 'w+') { |f| f.write(db_config) }
  # install gems
  say("Installing gems...")
  system("cd #{home}/.sapwood && bundle install")
  # copying config (temp until config is killed)
  say("Copying config...")
  config_dir = "#{home}/.sapwood/config"
  system("cp #{config_dir}/sapwood.sample.yml #{config_dir}/sapwood.yml")
  # finish up
  msg  = "\nAll done! Just run <%= color('sapwood start', [:green, :bold]) %> "
  msg += "to start the server."
  say(msg)
# ======================================
# Start Rails Server
# ======================================
when 'start'
  pwd = `pwd`.gsub(/\n/, '')
  say("=> Booting Sapwood server...")
  system("cd #{home}/.sapwood && bundle exec rails s -d -p 4141")
  system("cd #{pwd}")
  msg  = "\nYou're up and running. Sapwood is now available at "
  msg += "http://localhost:4141."
  say(msg)
# ======================================
# Stop Rails Server
# ======================================
when 'stop'
  say("=> Sapwood server going down...")
  system("kill $(lsof -ti :4141)")
  say("=> Done.")
# ======================================
# Restart Rails Server
# ======================================
when 'restart'
  say("=> Sapwood server going down...")
  system("kill $(lsof -ti :4141)")
  say("=> Done.")
  pwd = `pwd`.gsub(/\n/, '')
  say("=> Booting Sapwood server...")
  system("cd #{home}/.sapwood && bundle exec rails s -d -p 4141")
  system("cd #{pwd}")
  msg  = "\nYou're up and running. Sapwood is now available at "
  msg += "http://localhost:4141."
  say(msg)
# ======================================
# Update Development App
# ======================================
when 'update'
  pwd = `pwd`.gsub(/\n/, '')
  system("cd #{home}/.sapwood && git fetch && git pull origin master")
  system("cd #{home}/.sapwood && bundle install")
  system("cd #{pwd}")
  say("\nYou're all up to date!")
# ======================================
# Link Project to Sapwood
# ======================================
when 'link'
  pwd = `pwd`.gsub(/\n/, '')
  slug = pwd.split('/').last
  sapwood = "#{home}/.sapwood"
  system("ln -sv #{pwd} #{sapwood}/projects")
  system("cd #{sapwood} && bundle exec rake sapwood:project:symlink[#{slug}]")
# ======================================
# Missing Argument
# ======================================
when nil, ''
  puts "Usage: sapwood [ACTION]"
  exit
else
  puts "Couldn't find the action: #{action}"
  exit
end
